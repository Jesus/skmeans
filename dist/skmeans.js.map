{"version":3,"sources":["skmeans.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","module","$","skmeans","window","MAX","eudist","v1","v2","len","sum","d","Math","sqrt","mandist","abs","init","val","v","push","data","k","initial","maxit","ks","idxs","conv","it","multi","floor","random","min","Infinity","idx","j","dist","count","old","dif","h","centroids"],"mappings":"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","file":"skmeans.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\n(function($) {\n\tvar skmeans = require(\"./main.js\");\n\t$.skmeans = skmeans;\n})(window);\n\n},{\"./main.js\":2}],2:[function(require,module,exports){\n/*jshint esversion: 6 */\n\nconst MAX = 10000;\n\n/**\n * Euclidean distance\n */\nfunction eudist(v1,v2) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tvar d = (v1[i]||0) - (v2[i]||0);\n\t\t\tsum += d*d;\n\t\t}\n\t\treturn Math.sqrt(sum);\n}\n\n/**\n * Manhattan distance\n */\nfunction mandist(v1,v2) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tsum += Math.abs((v1[i]||0) - (v2[i]||0));\n\t\t}\n\t\treturn sum;\n}\n\n/**\n * Inits an array with values\n */\nfunction init(len,val) {\n\tvar v = [];\n\tfor(let i=0;i<len;i++) v.push(val);\n\treturn v;\n}\n\nfunction skmeans(data,k,initial,maxit) {\n\t\"use strict\";\n\n\tvar ks = [], idxs = [], len = data.length;\n\tvar conv = false, it = maxit || MAX;\n\tvar multi = data[0].length;\n\n\tif(!initial) {\n\t\tfor(let i=0;i<k;i++) {\n\t\t\tks.push(data[Math.floor(Math.random()*len)]);\n\t\t}\n\t}\n\telse {\n\t\tks = initial;\n\t}\n\n\tdo {\n\t\t// For each value in data, find the nearest centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet min = Infinity, idx = 0;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\t// Multidimensional or unidimensional\n\t\t\t\tvar dist = multi? eudist(data[i],ks[j]) : Math.abs(data[i]-ks[j]);\n\t\t\t\tif(dist<min) {\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tidx = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tidxs[i] = idx;\n\t\t}\n\n\t\t// Recalculate centroids\n\t\tvar count = [], sum = [], old = [], dif = 0;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t// Multidimensional or unidimensional\n\t\t\tcount[j] = 0;\n\t\t\tsum[j] = multi? init(multi,0) : 0;\n\t\t\told[j] = ks[j];\n\t\t}\n\n\t\t// If multidimensional\n\t\tif(multi) {\n\t\t\tfor(let j=0;j<k;j++) ks[j] = [];\n\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tfor(let h=0;h<multi;h++) {\n\t\t\t\t\tsum[idxs[i]][h] += data[i][h];\n\t\t\t\t}\n\t\t\t\tcount[idxs[i]]++;\n\t\t\t}\n\t\t\t// Calculate de average for each centroid\n\t\t\t// and de distance between old and new centroids\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tfor(let h=0;h<multi;h++) {\n\t\t\t\t\tks[j][h] = sum[j][h]/count[j] || 0;\n\t\t\t\t\tdif += old[j][h] - ks[j][h];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If unidimensional\n\t\telse {\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tsum[idxs[i]] += data[i];\n\t\t\t\tcount[idxs[i]]++;\n\t\t\t}\n\t\t\t// Calculate de average for each centroid\n\t\t\t// and de distance between old and new centroids\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tks[j] = sum[j]/count[j] || 0;\n\t\t\t\tdif += old[j] - ks[j];\n\t\t\t}\n\t\t}\n\n\t\tconv = (dif===0) || (--it<=0);\n\t}while(!conv);\n\n\treturn {\n\t\tit : MAX-it,\n\t\tk : k,\n\t\tidxs : idxs,\n\t\tcentroids : ks\n\t};\n}\n\nmodule.exports = skmeans;\n\n},{}]},{},[1]);\n"]}