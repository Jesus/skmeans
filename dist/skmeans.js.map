{"version":3,"sources":["skmeans.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","module","$","skmeans","window","MAX","eudist","v1","v2","len","sum","d","Math","sqrt","mandist","abs","init","val","v","data","k","initial","maxit","ks","idxs","conv","it","vlen","multi","push","floor","random","min","Infinity","idx","j","dist","count","old","dif","vsum","vect","h","ksj","sumj","oldj","cj","centroids"],"mappings":"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","file":"skmeans.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\n(function($) {\n\tvar skmeans = require(\"./main.js\");\n\t$.skmeans = skmeans;\n})(window);\n\n},{\"./main.js\":2}],2:[function(require,module,exports){\n/*jshint esversion: 6 */\n\nconst MAX = 10000;\n\n/**\n * Euclidean distance\n */\nfunction eudist(v1,v2) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tvar d = (v1[i]||0) - (v2[i]||0);\n\t\t\tsum += d*d;\n\t\t}\n\t\treturn Math.sqrt(sum);\n}\n\n/**\n * Manhattan distance\n */\nfunction mandist(v1,v2) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tsum += Math.abs((v1[i]||0) - (v2[i]||0));\n\t\t}\n\t\treturn sum;\n}\n\n/**\n * Inits an array with values\n */\nfunction init(len,val,v) {\n\tv = v || [];\n\tfor(let i=0;i<len;i++) v[i] = val;\n\treturn v;\n}\n\nfunction skmeans(data,k,initial,maxit) {\n\tvar ks = [], idxs = [], len = data.length;\n\tvar conv = false, it = maxit || MAX;\n\tvar vlen = data[0].length, multi = vlen>0;\n\n\tif(!initial) {\n\t\tfor(let i=0;i<k;i++) {\n\t\t\tks.push(data[Math.floor(Math.random()*len)]);\n\t\t}\n\t}\n\telse {\n\t\tks = initial;\n\t}\n\n\tdo {\n\t\t// For each value in data, find the nearest centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet min = Infinity, idx = 0;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\t// Multidimensional or unidimensional\n\t\t\t\tvar dist = multi? eudist(data[i],ks[j]) : Math.abs(data[i]-ks[j]);\n\t\t\t\tif(dist<min) {\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tidx = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tidxs[i] = idx;\n\t\t}\n\n\t\t// Recalculate centroids\n\t\tvar count = [], sum = [], old = [], dif = 0;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t// Multidimensional or unidimensional\n\t\t\tcount[j] = 0;\n\t\t\tsum[j] = multi? init(vlen,0,sum[j]) : 0;\n\t\t\told[j] = ks[j];\n\t\t}\n\n\t\t// If multidimensional\n\t\tif(multi) {\n\t\t\tfor(let j=0;j<k;j++) ks[j] = [];\n\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet idx = idxs[i], vsum = sum[idx], vect = data[i];\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tvsum[h] += vect[h];\n\t\t\t\t}\n\t\t\t\tcount[idx]++;\n\t\t\t}\n\t\t\t// Calculate de average for each centroid\n\t\t\t// and de distance between old and new centroids\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tlet ksj = ks[j], sumj = sum[j],oldj = old[j], cj = count[j];\n\t\t\t\t// New average\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = sumj[h]/cj || 0;\n\t\t\t\t}\n\t\t\t\t// Find if centroids have moved\n\t\t\t\tif(conv) {\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\n\t\t\t\t\t\t\tconv = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If unidimensional\n\t\telse {\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tsum[idxs[i]] += data[i];\n\t\t\t\tcount[idxs[i]]++;\n\t\t\t}\n\t\t\t// Calculate de average for each centroid\n\t\t\t// and de distance between old and new centroids\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tks[j] = sum[j]/count[j] || 0;\n\t\t\t}\n\t\t\t// Find if centroids have moved\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tif(old[j]!=ks[j]) {\n\t\t\t\t\tconv = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconv = conv || (--it<=0);\n\t}while(!conv);\n\n\treturn {\n\t\tit : MAX-it,\n\t\tk : k,\n\t\tidxs : idxs,\n\t\tcentroids : ks\n\t};\n}\n\nmodule.exports = skmeans;\n\n},{}]},{},[1]);\n"]}