{"version":3,"sources":["skmeans.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","module","$","skmeans","window","MAX","eudist","v1","v2","sqrt","len","sum","d","Math","dist","abs","kmrand","data","k","map","list","ks","forEach","key","JSON","stringify","push","b","v","floor","random","kmpp","dfn","c","dists","ksd","min","apply","dsum","reduce","prs","pr","sort","p","cs","rnd","mprs","filter","init","val","initial","maxit","old","idxs","conv","it","vlen","multi","Infinity","idx","j","count","dif","vsum","vect","h","ksj","sumj","oldj","cj","centroids"],"mappings":"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","file":"skmeans.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\r\n\r\n(function($) {\r\n\tvar skmeans = require(\"./main.js\");\r\n\t$.skmeans = skmeans;\r\n})(window);\r\n\n},{\"./main.js\":2}],2:[function(require,module,exports){\n/*jshint esversion: 6 */\r\n\r\nconst MAX = 10000;\r\n\r\n/**\r\n * Euclidean distance\r\n */\r\nfunction eudist(v1,v2,sqrt) {\r\n\tvar len = v1.length;\r\n\tvar sum = 0;\r\n\r\n\tfor(let i=0;i<len;i++) {\r\n\t\tvar d = (v1[i]||0) - (v2[i]||0);\r\n\t\tsum += d*d;\r\n\t}\r\n\t// Square root not really needed\r\n\treturn sqrt? Math.sqrt(sum) : sum;\r\n}\r\n\r\n/**\r\n * Unidimensional distance\r\n */\r\nfunction dist(v1,v2,sqrt) {\r\n\tvar d = Math.abs(v1-v2);\r\n\treturn sqrt? d : d*d;\r\n}\r\n\r\nfunction kmrand(data,k) {\r\n\tvar map = {}, list = [];\r\n\tvar ks = [];\r\n\r\n\tdata.forEach(d=>{\r\n\t\tvar key = JSON.stringify(d);\r\n\t\tmap[key] = map[k]||d;\r\n\t});\r\n\tfor(var key in map) list.push(map[key]);\r\n\tif(k>list.length) {\r\n\t\tthrow new Error(\"Cluster size greater than distinct data points\");\r\n\t}\r\n\telse {\r\n\t\tvar len = data.length, map = {};\r\n\t\tfor(let i=0;i<k;i++) {\r\n\t\t\tvar b = false;\r\n\t\t\twhile(!b) {\r\n\t\t\t\tvar v = list[Math.floor(Math.random()*len)];\r\n\t\t\t\tvar key = JSON.stringify(v);\r\n\t\t\t\tif(!map[key]) {\r\n\t\t\t\t\tks.push(v);\r\n\t\t\t\t\tmap[key] = true;\r\n\t\t\t\t\tb = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn ks;\r\n}\r\n\r\n/**\r\n * K-means++ initial centroid selection\r\n */\r\nfunction kmpp(data,k) {\r\n\tvar dfn = data[0].length? eudist : dist;\r\n\tvar ks = [], len = data.length;\r\n\r\n\t// First random centroid\r\n\tvar c = data[Math.floor(Math.random()*len)];\r\n\tks.push(c);\r\n\r\n\t// Retrieve next centroids\r\n\twhile(ks.length<k) {\r\n\t\t// Min Distances\r\n\t\tlet dists = data.map(v=>{\r\n\t\t\t// Return the min distance of v to current centroids\r\n\t\t\tlet ksd = ks.map(c=>dfn(v,c));\r\n\t\t\treturn Math.min.apply(this,ksd);\r\n\t\t});\r\n\r\n\t\t// Distance sum\r\n\t\tlet dsum = dists.reduce((r,v)=>r+v,0);\r\n\r\n\t\t// Probabilities and cummulative prob (cumsum)\r\n\t\tlet prs = dists.map((d,i)=>{return {i:i,v:data[i],pr:d/dsum}});\r\n\t\tprs.sort((a,b)=>a.pr-b.pr);\r\n\t\tprs.forEach((p,i)=>{p.cs = p.pr + (i>0? prs[i-1].cs : 0)});\r\n\r\n\t\t// Randomize\r\n\t\tlet rnd = Math.random();\r\n\r\n\t\t// Gets only the items whose cumsum >= rnd\r\n\t\tlet mprs = prs.filter(p=>p.cs>=rnd);\r\n\r\n\t\t// this is our new centroid\r\n\t\tks.push(mprs[0].v);\r\n\t}\r\n\r\n\treturn ks;\r\n}\r\n\r\n/**\r\n * Inits an array with values\r\n */\r\nfunction init(len,val,v) {\r\n\tv = v || [];\r\n\tfor(let i=0;i<len;i++) v[i] = val;\r\n\treturn v;\r\n}\r\n\r\nfunction skmeans(data,k,initial,maxit) {\r\n\tvar ks = [], old = [], idxs = [], dist = [];\r\n\tvar conv = false, it = maxit || MAX;\r\n\tvar len = data.length, vlen = data[0].length, multi = vlen>0;\r\n\r\n\tif(!initial) {\r\n\t\tfor(let i=0;i<k;i++)\r\n\t\t\tks.push(data[Math.floor(Math.random()*len)]);\r\n\t}\r\n\telse if(initial==\"kmrand\") {\r\n\t\tks = kmrand(data,k);\r\n\t}\r\n\telse if(initial==\"kmpp\") {\r\n\t\tks = kmpp(data,k);\r\n\t}\r\n\telse {\r\n\t\tks = initial;\r\n\t}\r\n\r\n\tdo {\r\n\t\t// For each value in data, find the nearest centroid\r\n\t\tfor(let i=0;i<len;i++) {\r\n\t\t\tlet min = Infinity, idx = 0;\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\t// Multidimensional or unidimensional\r\n\t\t\t\tvar dist = multi? eudist(data[i],ks[j]) : Math.abs(data[i]-ks[j]);\r\n\t\t\t\tif(dist<=min) {\r\n\t\t\t\t\tmin = dist;\r\n\t\t\t\t\tidx = j;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tidxs[i] = idx;\r\n\t\t}\r\n\r\n\t\t// Recalculate centroids\r\n\t\tvar count = [], sum = [], old = [], dif = 0;\r\n\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t// Multidimensional or unidimensional\r\n\t\t\tcount[j] = 0;\r\n\t\t\tsum[j] = multi? init(vlen,0,sum[j]) : 0;\r\n\t\t\told[j] = ks[j];\r\n\t\t}\r\n\r\n\t\t// If multidimensional\r\n\t\tif(multi) {\r\n\t\t\tfor(let j=0;j<k;j++) ks[j] = [];\r\n\r\n\t\t\t// Sum values and count for each centroid\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tlet idx = idxs[i],\t// Centroid for that item\r\n\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\r\n\t\t\t\t\tvect = data[idx];\t// Current vector\r\n\r\n\t\t\t\t// Accumulate value on the centroid for current vector\r\n\t\t\t\tfor(let h=0;h<vlen;h++) {\r\n\t\t\t\t\tvsum[h] += vect[h];\r\n\t\t\t\t}\r\n\t\t\t\tcount[idx]++;\t// Number of values for this centroid\r\n\t\t\t}\r\n\t\t\t// Calculate the average for each centroid\r\n\t\t\tconv = true;\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tlet ksj = ks[j],\t// Current centroid\r\n\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\r\n\t\t\t\t\toldj = old[j], \t// Old centroid value\r\n\t\t\t\t\tcj = count[j];\t// Number of elements for this centrois\r\n\r\n\t\t\t\t// New average\r\n\t\t\t\tfor(let h=0;h<vlen;h++) {\r\n\t\t\t\t\tksj[h] = sumj[h]/cj || 0;\t// New centroid\r\n\t\t\t\t}\r\n\t\t\t\t// Find if centroids have moved\r\n\t\t\t\tif(conv) {\r\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\r\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\r\n\t\t\t\t\t\t\tconv = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If unidimensional\r\n\t\telse {\r\n\t\t\t// Sum values and count for each centroid\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tlet idx = idxs[i];\r\n\t\t\t\tsum[idx] += data[i];\r\n\t\t\t\tcount[idx]++;\r\n\t\t\t}\r\n\t\t\t// Calculate the average for each centroid\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tks[j] = sum[j]/count[j] || 0;\t// New centroid\r\n\t\t\t}\r\n\t\t\t// Find if centroids have moved\r\n\t\t\tconv = true;\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tif(old[j]!=ks[j]) {\r\n\t\t\t\t\tconv = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconv = conv || (--it<=0);\r\n\t}while(!conv);\r\n\r\n\treturn {\r\n\t\tit : MAX-it,\r\n\t\tk : k,\r\n\t\tidxs : idxs,\r\n\t\tcentroids : ks\r\n\t};\r\n}\r\n\r\nmodule.exports = skmeans;\r\n\n},{}]},{},[1]);\n"]}