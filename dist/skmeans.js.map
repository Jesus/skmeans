{"version":3,"sources":["skmeans.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","module","$","skmeans","window","eudist","v1","v2","sqrt","len","sum","d","Math","dist","abs","Distance","kmrand","data","k","map","list","ks","key","JSON","stringify","push","m","idx","floor","random","kmpp","distance","c","dists","lk","dsum","prs","min","Infinity","j","v","pr","cs","sort","b","rnd","ClusterInit","MAX","init","val","initial","maxit","old","idxs","conv","it","vlen","multi","count","dif","vsum","vect","h","ksj","sumj","oldj","cj","centroids"],"mappings":"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","file":"skmeans.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\n(function($) {\n\tvar skmeans = require(\"./main.js\");\n\t$.skmeans = skmeans;\n})(window);\n\n},{\"./main.js\":4}],2:[function(require,module,exports){\nmodule.exports = {\n\t/**\n\t * Euclidean distance\n\t */\n\teudist(v1,v2,sqrt) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tvar d = (v1[i]||0) - (v2[i]||0);\n\t\t\tsum += d*d;\n\t\t}\n\t\t// Square root not really needed\n\t\treturn sqrt? Math.sqrt(sum) : sum;\n\t},\n\n\t/**\n\t * Unidimensional distance\n\t */\n\tdist(v1,v2,sqrt) {\n\t\tvar d = Math.abs(v1-v2);\n\t\treturn sqrt? d : d*d;\n\t}\n\n}\n\n},{}],3:[function(require,module,exports){\nconst\n\tDistance = require(\"./distance.js\"),\n\teudist = Distance.eudist,\n\tdist = Distance.dist;\n\nmodule.exports = {\n\tkmrand(data,k) {\n\t\tvar map = {}, list = [];\n\t\tvar ks = [], len = data.length\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet d = data[i];\n\t\t\tvar key = JSON.stringify(d);\n\t\t\tif(!map[key]) {\n\t\t\t\tmap[key] = true;\n\t\t\t\tlist.push(d);\n\t\t\t}\n\t\t};\n\n\t\tif(k>list.length) {\n\t\t\tthrow new Error(\"Cluster size greater than distinct data points\");\n\t\t}\n\t\telse {\n\t\t\tlet l = list.length, m = {};\n\t\t\twhile(ks.length<k) {\n\t\t\t\tlet idx = Math.floor(Math.random()*l);\n\t\t\t\tif(!m[idx]) {\n\t\t\t\t\tm[idx] = true;\n\t\t\t\t\tks.push(list[idx]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ks;\n\t},\n\n\t/**\n\t * K-means++ initial centroid selection\n\t */\n\tkmpp(data,k) {\n\t\tvar distance = data[0].length? eudist : dist;\n\t\tvar ks = [], len = data.length;\n\n\t\t// First random centroid\n\t\tvar c = data[Math.floor(Math.random()*len)];\n\t\tks.push(c);\n\n\t\t// Retrieve next centroids\n\t\twhile(ks.length<k) {\n\t\t\t// Min Distances between current centroids and data points\n\t\t\tlet dists = [], lk = ks.length;\n\t\t\tlet dsum = 0, prs = [];\n\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet min = Infinity;\n\t\t\t\tfor(let j=0;j<lk;j++) {\n\t\t\t\t\tlet dist = distance(data[i],ks[j]);\n\t\t\t\t\tif(dist<=min) min = dist;\n\t\t\t\t}\n\t\t\t\tdists[i] = min;\n\t\t\t}\n\n\t\t\t// Sum all min distances\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tdsum += dists[i]\n\t\t\t}\n\n\t\t\t// Probabilities and cummulative prob (cumsum)\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tprs[i] = {i:i, v:data[i],\tpr:dists[i]/dsum, cs:0}\n\t\t\t}\n\n\t\t\t// Sort Probabilities\n\t\t\tprs.sort((a,b)=>a.pr-b.pr);\n\n\t\t\t// Cummulative Probabilities\n\t\t\tprs[0].cs = prs[0].pr;\n\t\t\tfor(let i=1;i<len;i++) {\n\t\t\t\tprs[i].cs = prs[i-1].cs + prs[i].pr;\n\t\t\t}\n\n\t\t\t// Randomize\n\t\t\tlet rnd = Math.random();\n\n\t\t\t// Gets only the items whose cumsum >= rnd\n\t\t\tlet idx = 0;\n\t\t\twhile(idx<len-1 && prs[idx++].cs>=rnd);\n\n\t\t\t// this is our new centroid\n\t\t\tks.push(prs[idx-1].v);\n\t\t}\n\n\t\treturn ks;\n\t}\n\n}\n\n},{\"./distance.js\":2}],4:[function(require,module,exports){\n/*jshint esversion: 6 */\n\nconst\n\tDistance = require(\"./distance.js\"),\n\tClusterInit = require(\"./kinit.js\"),\n\teudist = Distance.eudist,\n\tdist = Distance.dist,\n\tkmrand = ClusterInit.kmrand,\n\tkmpp = ClusterInit.kmpp;\n\nconst MAX = 10000;\n\n/**\n * Inits an array with values\n */\nfunction init(len,val,v) {\n\tv = v || [];\n\tfor(let i=0;i<len;i++) v[i] = val;\n\treturn v;\n}\n\nfunction skmeans(data,k,initial,maxit) {\n\tvar ks = [], old = [], idxs = [], dist = [];\n\tvar conv = false, it = maxit || MAX;\n\tvar len = data.length, vlen = data[0].length, multi = vlen>0;\n\n\tif(!initial) {\n\t\tfor(let i=0;i<k;i++)\n\t\t\tks.push(data[Math.floor(Math.random()*len)]);\n\t}\n\telse if(initial==\"kmrand\") {\n\t\tks = kmrand(data,k);\n\t}\n\telse if(initial==\"kmpp\") {\n\t\tks = kmpp(data,k);\n\t}\n\telse {\n\t\tks = initial;\n\t}\n\n\tdo {\n\t\t// For each value in data, find the nearest centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet min = Infinity, idx = 0;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\t// Multidimensional or unidimensional\n\t\t\t\tvar dist = multi? eudist(data[i],ks[j]) : Math.abs(data[i]-ks[j]);\n\t\t\t\tif(dist<=min) {\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tidx = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tidxs[i] = idx;\n\t\t}\n\n\t\t// Recalculate centroids\n\t\tvar count = [], sum = [], old = [], dif = 0;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t// Multidimensional or unidimensional\n\t\t\tcount[j] = 0;\n\t\t\tsum[j] = multi? init(vlen,0,sum[j]) : 0;\n\t\t\told[j] = ks[j];\n\t\t}\n\n\t\t// If multidimensional\n\t\tif(multi) {\n\t\t\tfor(let j=0;j<k;j++) ks[j] = [];\n\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet idx = idxs[i],\t// Centroid for that item\n\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\tvect = data[idx];\t// Current vector\n\n\t\t\t\t// Accumulate value on the centroid for current vector\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tvsum[h] += vect[h];\n\t\t\t\t}\n\t\t\t\tcount[idx]++;\t// Number of values for this centroid\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tlet ksj = ks[j],\t// Current centroid\n\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\toldj = old[j], \t// Old centroid value\n\t\t\t\t\tcj = count[j];\t// Number of elements for this centrois\n\n\t\t\t\t// New average\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = sumj[h]/cj || 0;\t// New centroid\n\t\t\t\t}\n\t\t\t\t// Find if centroids have moved\n\t\t\t\tif(conv) {\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\n\t\t\t\t\t\t\tconv = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If unidimensional\n\t\telse {\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet idx = idxs[i];\n\t\t\t\tsum[idx] += data[i];\n\t\t\t\tcount[idx]++;\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tks[j] = sum[j]/count[j] || 0;\t// New centroid\n\t\t\t}\n\t\t\t// Find if centroids have moved\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tif(old[j]!=ks[j]) {\n\t\t\t\t\tconv = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconv = conv || (--it<=0);\n\t}while(!conv);\n\n\treturn {\n\t\tit : MAX-it,\n\t\tk : k,\n\t\tidxs : idxs,\n\t\tcentroids : ks\n\t};\n}\n\nmodule.exports = skmeans;\n\n},{\"./distance.js\":2,\"./kinit.js\":3}]},{},[1]);\n"]}