{"version":3,"sources":["skmeans.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","module","$","skmeans","window","MAX","eudist","v1","v2","sqrt","len","sum","d","Math","dist","abs","kmpp","data","k","dfn","ks","c","floor","random","push","dists","map","ksd","v","min","apply","dsum","reduce","prs","pr","sort","b","forEach","p","cs","rnd","mprs","filter","init","val","initial","maxit","old","idxs","conv","it","vlen","multi","Infinity","idx","j","count","dif","vsum","vect","h","ksj","sumj","oldj","cj","centroids"],"mappings":"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","file":"skmeans.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\n(function($) {\n\tvar skmeans = require(\"./main.js\");\n\t$.skmeans = skmeans;\n})(window);\n\n},{\"./main.js\":2}],2:[function(require,module,exports){\n/*jshint esversion: 6 */\n\nconst MAX = 10000;\n\n/**\n * Euclidean distance\n */\nfunction eudist(v1,v2,sqrt) {\n\tvar len = v1.length;\n\tvar sum = 0;\n\n\tfor(let i=0;i<len;i++) {\n\t\tvar d = (v1[i]||0) - (v2[i]||0);\n\t\tsum += d*d;\n\t}\n\t// Square root not really needed\n\treturn sqrt? Math.sqrt(sum) : sum;\n}\n\n/**\n * Unidimensional distance\n */\nfunction dist(v1,v2,sqrt) {\n\tvar d = Math.abs(v1-v2);\n\treturn sqrt? d : d*d;\n}\n\n/**\n * K-means++ initial centroid selection\n */\nfunction kmpp(data,k) {\n\tvar dfn = data[0].length? eudist : dist;\n\tvar ks = [], len = data.length;\n\n\t// First random centroid\n\tvar c = data[Math.floor(Math.random()*len)];\n\tks.push(c);\n\n\t// Retrieve next centroids\n\twhile(ks.length<k) {\n\t\t// Min Distances\n\t\tlet dists = data.map(v=>{\n\t\t\t// Return the min distance of v to current centroids\n\t\t\tlet ksd = ks.map(c=>dfn(v,c));\n\t\t\treturn Math.min.apply(this,ksd);\n\t\t});\n\n\t\t// Distance sum\n\t\tlet dsum = dists.reduce((r,v)=>r+v,0);\n\n\t\t// Probabilities and cummulative prob (cumsum)\n\t\tlet prs = dists.map((d,i)=>{return {i:i,v:data[i],pr:d/dsum}});\n\t\tprs.sort((a,b)=>a.pr-b.pr);\n\t\tprs.forEach((p,i)=>{p.cs = p.pr + (i>0? prs[i-1].cs : 0)});\n\n\t\t// Randomize\n\t\tlet rnd = Math.random();\n\n\t\t// Gets only the items whose cumsum >= rnd\n\t\tlet mprs = prs.filter(p=>p.cs>=rnd);\n\n\t\t// this is our new centroid\n\t\tks.push(mprs[0].v);\n\t}\n\n\treturn ks;\n}\n\n/**\n * Inits an array with values\n */\nfunction init(len,val,v) {\n\tv = v || [];\n\tfor(let i=0;i<len;i++) v[i] = val;\n\treturn v;\n}\n\nfunction skmeans(data,k,initial,maxit) {\n\tvar ks = [], old = [], idxs = [], dist = [];\n\tvar conv = false, it = maxit || MAX;\n\tvar len = data.length, vlen = data[0].length, multi = vlen>0;\n\n\tif(!initial) {\n\t\tfor(let i=0;i<k;i++) {\n\t\t\tks.push(data[Math.floor(Math.random()*len)]);\n\t\t}\n\t}\n\telse if(initial==\"kmpp\") {\n\t\tks = kmpp(data,k);\n\t}\n\telse {\n\t\tks = initial;\n\t}\n\n\tdo {\n\t\t// For each value in data, find the nearest centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet min = Infinity, idx = 0;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\t// Multidimensional or unidimensional\n\t\t\t\tvar dist = multi? eudist(data[i],ks[j]) : Math.abs(data[i]-ks[j]);\n\t\t\t\tif(dist<min) {\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tidx = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tidxs[i] = idx;\n\t\t}\n\n\t\t// Recalculate centroids\n\t\tvar count = [], sum = [], old = [], dif = 0;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t// Multidimensional or unidimensional\n\t\t\tcount[j] = 0;\n\t\t\tsum[j] = multi? init(vlen,0,sum[j]) : 0;\n\t\t\told[j] = ks[j];\n\t\t}\n\n\t\t// If multidimensional\n\t\tif(multi) {\n\t\t\tfor(let j=0;j<k;j++) ks[j] = [];\n\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet idx = idxs[i],\t// Centroid for that item\n\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\tvect = data[i];\t\t// Current vector\n\n\t\t\t\t// Accumulate value on the centroid for current vector\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tvsum[h] += vect[h];\n\t\t\t\t}\n\t\t\t\tcount[idx]++;\t// Number of values for this centroid\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tlet ksj = ks[j],\t// Current centroid\n\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\toldj = old[j], \t// Old centroid value\n\t\t\t\t\tcj = count[j];\t// Number of elements for this centrois\n\n\t\t\t\t// New average\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = sumj[h]/cj || 0;\t// New centroid\n\t\t\t\t}\n\t\t\t\t// Find if centroids have moved\n\t\t\t\tif(conv) {\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\n\t\t\t\t\t\t\tconv = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If unidimensional\n\t\telse {\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet idx = idxs[i];\n\t\t\t\tsum[idx] += data[i];\n\t\t\t\tcount[idx]++;\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tks[j] = sum[j]/count[j] || 0;\t// New centroid\n\t\t\t}\n\t\t\t// Find if centroids have moved\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tif(old[j]!=ks[j]) {\n\t\t\t\t\tconv = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconv = conv || (--it<=0);\n\t}while(!conv);\n\n\treturn {\n\t\tit : MAX-it,\n\t\tk : k,\n\t\tidxs : idxs,\n\t\tcentroids : ks\n\t};\n}\n\nmodule.exports = skmeans;\n\n},{}]},{},[1]);\n"]}