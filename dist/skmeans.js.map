{"version":3,"sources":["skmeans.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","module","$","skmeans","window","MAX","eudist","v1","v2","len","sum","d","mandist","Math","abs","equals","multi","init","val","v","data","k","initial","maxit","ks","old","idxs","dist","conv","it","vlen","push","floor","random","min","Infinity","idx","j","count","dif","vsum","vect","h","ksj","sumj","oldj","cj","centroids"],"mappings":"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","file":"skmeans.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\n(function($) {\n\tvar skmeans = require(\"./main.js\");\n\t$.skmeans = skmeans;\n})(window);\n\n},{\"./main.js\":2}],2:[function(require,module,exports){\n/*jshint esversion: 6 */\n\nconst MAX = 10000;\n\n/**\n * Euclidean distance\n */\nfunction eudist(v1,v2) {\n\tvar len = v1.length;\n\tvar sum = 0;\n\n\tfor(let i=0;i<len;i++) {\n\t\tvar d = (v1[i]||0) - (v2[i]||0);\n\t\tsum += d*d;\n\t}\n\t// Square root not really needed\n\treturn sum;\t//Math.sqrt(sum);\n}\n\n/**\n * Manhattan distance\n */\nfunction mandist(v1,v2) {\n\tvar len = v1.length;\n\tvar sum = 0;\n\n\tfor(let i=0;i<len;i++) {\n\t\tsum += Math.abs((v1[i]||0) - (v2[i]||0));\n\t}\n\treturn sum;\n}\n\nfunction equals(v1,v2,multi) {\n\tvar l = v1.length;\n\tfor(var i=0;i<l;i++)\n\t\tif(v1[i]!=v2[i]) return false;\n\treturn true;\n}\n\n/**\n * Inits an array with values\n */\nfunction init(len,val,v) {\n\tv = v || [];\n\tfor(let i=0;i<len;i++) v[i] = val;\n\treturn v;\n}\n\nfunction skmeans(data,k,initial,maxit) {\n\tvar ks = [], old = [], idxs = [], dist = [];\n\tvar conv = false, it = maxit || MAX;\n\tvar len = data.length, vlen = data[0].length, multi = vlen>0;\n\n\tif(!initial) {\n\t\tfor(let i=0;i<k;i++) {\n\t\t\tks.push(data[Math.floor(Math.random()*len)]);\n\t\t}\n\t}\n\telse {\n\t\tks = initial;\n\t}\n\n\tdo {\n\t\t// For each value in data, find the nearest centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet min = Infinity, idx = 0;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\t// Multidimensional or unidimensional\n\t\t\t\tvar dist = multi? eudist(data[i],ks[j]) : Math.abs(data[i]-ks[j]);\n\t\t\t\tif(dist<min) {\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tidx = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tidxs[i] = idx;\n\t\t}\n\n\t\t// Recalculate centroids\n\t\tvar count = [], sum = [], old = [], dif = 0;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t// Multidimensional or unidimensional\n\t\t\tcount[j] = 0;\n\t\t\tsum[j] = multi? init(vlen,0,sum[j]) : 0;\n\t\t\told[j] = ks[j];\n\t\t}\n\n\t\t// If multidimensional\n\t\tif(multi) {\n\t\t\tfor(let j=0;j<k;j++) ks[j] = [];\n\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet idx = idxs[i],\t// Centroid for that item\n\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\tvect = data[i];\t\t// Current vector\n\n\t\t\t\t// Accumulate value on the centroid for current vector\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tvsum[h] += vect[h];\n\t\t\t\t}\n\t\t\t\tcount[idx]++;\t// Number of values for this centroid\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tlet ksj = ks[j],\t// Current centroid\n\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\toldj = old[j], \t// Old centroid value\n\t\t\t\t\tcj = count[j];\t// Number of elements for this centrois\n\n\t\t\t\t// New average\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = sumj[h]/cj || 0;\t// New centroid\n\t\t\t\t}\n\t\t\t\t// Find if centroids have moved\n\t\t\t\tif(conv) {\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\n\t\t\t\t\t\t\tconv = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If unidimensional\n\t\telse {\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet idx = idxs[i];\n\t\t\t\tsum[idx] += data[i];\n\t\t\t\tcount[idx]++;\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tks[j] = sum[j]/count[j] || 0;\t// New centroid\n\t\t\t}\n\t\t\t// Find if centroids have moved\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tif(old[j]!=ks[j]) {\n\t\t\t\t\tconv = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconv = conv || (--it<=0);\n\t}while(!conv);\n\n\treturn {\n\t\tit : MAX-it,\n\t\tk : k,\n\t\tidxs : idxs,\n\t\tcentroids : ks\n\t};\n}\n\nmodule.exports = skmeans;\n\n},{}]},{},[1]);\n"]}